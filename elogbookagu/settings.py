"""
Django settings for elogbookagu project.

Generated by 'django-admin startproject' using Django 5.1.5.

For more information on this file, see
https://docs.djangoproject.com/en/5.1/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/5.1/ref/settings/
"""

from pathlib import Path
import os
from decouple import config
import dj_database_url
import warnings
from django.utils.deprecation import RemovedInDjango60Warning


# Build paths inside the project like this: BASE_DIR / 'subdir'.
BASE_DIR = Path(__file__).resolve().parent.parent


# Quick-start development settings - unsuitable for production
# See https://docs.djangoproject.com/en/5.1/howto/deployment/checklist/

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = config("SECRET_KEY")


# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = False

# DEBUG = os.getenelog("DEBUG", "False") == "True"
#ALLOWED_HOSTS = ['63.178.58.137', 'elog.agu.edu.bh']
# Include additional hostnames/IPs observed in production requests to avoid DisallowedHost
ALLOWED_HOSTS = [
    'elog.agu.edu.bh',
    'www.elog.agu.edu.bh',
    '63.178.58.137',
    # Allow common local/test hosts so Django TestClient and local dev
    # environments do not get a 400 response due to host header checks.
   
]


# Application definition

# Email settings
# Use the console backend during development to avoid sending real emails.
# This effectively disables SMTP and email verification flows.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
# Clear any SMTP-specific settings so they are not used accidentally.
EMAIL_HOST = ''
EMAIL_PORT = None
EMAIL_USE_TLS = False
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

INSTALLED_APPS = [
    'django.contrib.sites',
    "import_export",
    "django.contrib.admin",
    "django.contrib.auth",
    "django.contrib.contenttypes",
    "django.contrib.sessions",
    "django.contrib.messages",
    "django.contrib.staticfiles",  
    "publicpage",
    "accounts",
    "defaultuser",
    "doctor_section",
    "admin_section",
    "student_section",
    "staff_section",   
    "django_extensions",
    "allauth",
    "allauth.account",
    "allauth.socialaccount",
    "allauth.socialaccount.providers.microsoft",
    'widget_tweaks',
]
MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'whitenoise.middleware.WhiteNoiseMiddleware',
    # sanitize incoming Host headers that may contain unexpected comma-separated values
    'elogbookagu.middleware.host_sanitizer.HostSanitizerMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'elogbookagu.middleware.sso_state_restore.SSOStateRestoreMiddleware',
    'elogbookagu.middleware.ensure_user.EnsureUserMiddleware',
    'elogbookagu.middleware.sso_logger.SSOCallbackLoggerMiddleware',
    # Strip unsafe next parameters before they reach login views/adapters
    'elogbookagu.middleware.strip_unsafe_next.StripUnsafeNextMiddleware',
    'elogbookagu.middleware.ms_login_redirect.MSLoginRedirectMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    # allauth middleware (required by django-allauth) - must run before RefreshUserMiddleware
    'allauth.account.middleware.AccountMiddleware',
    # Refresh user from DB each request so role changes in admin take effect immediately
    # This runs after allauth to ensure authentication is fully established
    'accounts.middleware.RefreshUserMiddleware',
]

# Tell Django which urls.py file to use
ROOT_URLCONF = 'elogbookagu.urls'
# Templates
TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': [os.path.join(BASE_DIR, 'templates')],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'django.contrib.messages.context_processors.messages',
                'doctor_section.context_processors.notification_count',
                'student_section.context_processors.student_notification_count',
                'admin_section.context_processors.admin_notification_count',
                'staff_section.context_processors.staff_notification_count',
                'elogbookagu.context_processors.user_data',
                'django.template.context_processors.media',
            ],
        },
    },
]


WSGI_APPLICATION = "elogbookagu.wsgi.application"


# Database
# https://docs.djangoproject.com/en/5.1/ref/settings/#databases

DATABASES = {
    "default": {
        "ENGINE": "django.db.backends.postgresql",
        "NAME": "ELogBookAgu",
        "USER": config("DB_USER"),
        "PASSWORD": config("DB_PASSWORD"),
        "HOST": config("DB_HOST", default="localhost"),
        "PORT": config("DB_PORT", default=5432, cast=int),
    }
}

# Password validation
# https://docs.djangoproject.com/en/5.1/ref/settings/#auth-password-validators

AUTH_PASSWORD_VALIDATORS = [
    {
        "NAME": "django.contrib.auth.password_validation.UserAttributeSimilarityValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.MinimumLengthValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.CommonPasswordValidator",
    },
    {
        "NAME": "django.contrib.auth.password_validation.NumericPasswordValidator",
    },
]
AUTHENTICATION_BACKENDS = [

    # Needed to login by username in Django admin, regardless of `allauth`
    'django.contrib.auth.backends.ModelBackend',

    # `allauth` specific authentication methods, such as login by email
    'allauth.account.auth_backends.AuthenticationBackend',

]

# Internationalization
# https://docs.djangoproject.com/en/5.1/topics/i18n/

LANGUAGE_CODE = "en-us"

TIME_ZONE = "UTC"

USE_I18N = True

USE_TZ = True


AUTH_USER_MODEL = "accounts.CustomUser"
# Point LOGIN_URL to the main login page that offers both traditional and SSO options
LOGIN_URL = "/login/"
LOGOUT_REDIRECT_URL = "/login/"  # Redirect to login page after logout



BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))


# Static files
STATIC_URL = '/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'staticfiles')  # production

# Only used for development if DEBUG=True
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, 'static'),  # dev static
] 

# Media files
MEDIA_URL = '/media/'
MEDIA_ROOT = os.path.join(BASE_DIR, 'media')

STATIC_URL = '/static/'
STATIC_ROOT = '/home/ubuntu/projects/Elogforlinux/elogbookagu/static/'
MEDIA_URL = '/media/'
MEDIA_ROOT = '/home/ubuntu/projects/Elogforlinux/elogbookagu/media/'

# Prevent STATICFILES_DIRS from containing STATIC_ROOT (avoids staticfiles.E002)
_possible_static_dir = os.path.join(BASE_DIR, 'static')
if os.path.abspath(_possible_static_dir) == os.path.abspath(STATIC_ROOT):
    STATICFILES_DIRS = []
else:
    STATICFILES_DIRS = [_possible_static_dir]

# Default primary key field type
# https://docs.djangoproject.com/en/5.1/ref/settings/#default-auto-f



DEFAULT_AUTO_FIELD = "django.db.models.BigAutoField"

CSRF_TRUSTED_ORIGINS = [
    'http://63.178.58.137',
    'http://elog.agu.edu.bh',
    'http://www.elog.agu.edu.bh',
    'https://elog.agu.edu.bh',
    'https://www.elog.agu.edu.bh',
]


CSRF_COOKIE_SECURE = True  # HTTPS ke liye True
SESSION_COOKIE_SECURE = True  # HTTPS ke liye True
SECURE_SSL_REDIRECT = True  # HTTP ko HTTPS par redirect
SECURE_PROXY_SSL_HEADER = ('HTTP_X_FORWARDED_PROTO', 'https')  # Nginx se HTTPS info pass karne ke liye

# Modern browsers may block cookies during cross-site OAuth redirects unless
# SameSite=None and Secure are explicitly set. Set these to allow the session
# cookie to be sent on the Microsoft callback and avoid state mismatch errors.
SESSION_COOKIE_SAMESITE = 'None'
CSRF_COOKIE_SAMESITE = 'None'
# Optional: set cookie domain if you use multiple subdomains (uncomment if needed)
# SESSION_COOKIE_DOMAIN = '.elog.agu.edu.bh'

SECURE_BROWSER_XSS_FILTER = True
SECURE_CONTENT_TYPE_NOSNIFF = True
X_FRAME_OPTIONS = "DENY"

# Temporarily disable cookie domain to test if it's causing session issues
# SESSION_COOKIE_DOMAIN = ".agu.edu.bh"
# CSRF_COOKIE_DOMAIN = ".agu.edu.bh"

AUTHENTICATION_BACKENDS = [
    "django.contrib.auth.backends.ModelBackend",
    "allauth.account.auth_backends.AuthenticationBackend",
]

# Allow tests to disable strict HTTPS/cookie behavior. Set RUNNING_TESTS=1
# in the environment when running the test script if you need the TestClient
# to avoid HTTPS redirects and secure cookie restrictions.
if os.environ.get('RUNNING_TESTS'):
    CSRF_COOKIE_SECURE = False
    SESSION_COOKIE_SECURE = False
    SECURE_SSL_REDIRECT = False


# After successful login (including SSO) send all logins to a central
# post-login redirect view which will pick the correct section based on
# the user's role. Use the concrete path to avoid ambiguity between a
# view-name and a URL path when other libraries (allauth) call into
# settings.
# LOGIN_REDIRECT_URL = '/accounts/post-login-redirect/'

LOGIN_REDIRECT_URL = '/accounts/post-login-redirect/'
ACCOUNT_SIGNUP_REDIRECT_URL = '/accounts/post-login-redirect/' 



# Sites framework (required by django-allauth)
SITE_ID = 1







# Configure Microsoft provider for django-allauth using environment variables
SOCIALACCOUNT_PROVIDERS = {
    'microsoft': {
        # Scope: request basic profile, email and openid for OIDC flow
        'SCOPE': ['User.Read', 'openid', 'email', 'profile'],
    # Use a tenant-specific endpoint by default. Read from environment (.env).
    # If you prefer to allow any tenant, set the Azure App's Supported account
    # types to "Accounts in any organizational directory" (multi-tenant),
    # then you can use 'common' instead.
    'TENANT': config('TENANT_ID'),
        'AUTH_PARAMS': {
            'response_type': 'code'
        },
        # Client credentials are provided via python-decouple .env
        'APP': {
            'client_id': config('MICROSOFT_CLIENT_ID', default=''),
            'secret': config('MICROSOFT_CLIENT_SECRET', default=''),
        }
    }
}

# Additional Microsoft / OpenID Connect settings
# Read redirect URI and tenant-specific endpoints from environment.
MICROSOFT_CLIENT_ID = config('MICROSOFT_CLIENT_ID', default='')
MICROSOFT_CLIENT_SECRET = config('MICROSOFT_CLIENT_SECRET', default='')
TENANT_ID = config('TENANT_ID')
# The REDIRECT_URI you register in Azure must match this value exactly.
# For production put: https://elog.agu.edu.bh/accounts/microsoft/login/callback/
REDIRECT_URI = config('MICROSOFT_REDIRECT_URI', default='https://elog.agu.edu.bh/accounts/microsoft/login/callback/')

# Compose the OAuth/OIDC endpoints for a tenant-aware authority (used by some custom flows)
MICROSOFT_AUTHORITY = f"https://login.microsoftonline.com/{TENANT_ID}"
MICROSOFT_AUTHORIZE_URL = f"{MICROSOFT_AUTHORITY}/oauth2/v2.0/authorize"
MICROSOFT_TOKEN_URL = f"{MICROSOFT_AUTHORITY}/oauth2/v2.0/token"

# Ensure allauth uses our adapter to control behaviour on social login/signup.
# We'll implement `accounts.adapters.CustomSocialAccountAdapter` below.
SOCIALACCOUNT_ADAPTER = 'accounts.adapters.CustomSocialAccountAdapter'

# Use a custom account adapter to control post-login redirects based on role
ACCOUNT_ADAPTER = 'accounts.adapters.CustomAccountAdapter'

# Additional allauth settings to ensure proper redirect behavior
SOCIALACCOUNT_LOGIN_ON_GET = True  # Allow GET requests for social login
SOCIALACCOUNT_AUTO_SIGNUP = True  # Automatically create accounts for social logins


# Signup/login ke liye fields define karo
ACCOUNT_SIGNUP_FIELDS = [
  "email",
    "password1",
    "password2",
    "first_name",
    "last_name",
    "phone_no",
]

ACCOUNT_EMAIL_VERIFICATION = "optional"  # Development ke liye

# email Reset / SMTP settings
# Ensure allauth does not require email verification or email uniqueness
# when using SSO-only authentication. Use console backend to avoid SMTP.
EMAIL_BACKEND = 'django.core.mail.backends.console.EmailBackend'
EMAIL_HOST = ''
EMAIL_PORT = None
EMAIL_USE_TLS = False
EMAIL_HOST_USER = ''
EMAIL_HOST_PASSWORD = ''

# django-allauth: disable email verification and make email optional when
# you ONLY allow SSO logins. Set verification to 'none' and don't require
# email during signup. Keep ACCOUNT_AUTHENTICATION_METHOD as 'username'
# if you still want to allow username-based admin logins locally.
ACCOUNT_EMAIL_VERIFICATION = 'none'
ACCOUNT_EMAIL_REQUIRED = False
ACCOUNT_USERNAME_REQUIRED = True
ACCOUNT_AUTHENTICATION_METHOD = 'username'

# Disable password reset/management emails by pointing to the console backend
# and avoiding allauth views that send emails. If you later enable local
# password logins, re-enable appropriate flows.


warnings.filterwarnings(
    "ignore",
    category=UserWarning,
    message=r".*ACCOUNT_LOGIN_METHODS conflicts with ACCOUNT_SIGNUP_FIELDS.*",
)


# Add detailed logging for authentication/social login issues (helpful during SSO callback failures)
LOGGING = {
    'version': 1,
    'disable_existing_loggers': False,
    'handlers': {
        'console': {
            'class': 'logging.StreamHandler',
        },
        'file': {
            'class': 'logging.FileHandler',
            'filename': os.path.join(BASE_DIR, 'sso-debug.log'),
            'level': 'DEBUG',
        },
    },
    'loggers': {
        'allauth': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'allauth.socialaccount': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
        'sso_debug': {
            'handlers': ['file'],
            'level': 'DEBUG',
            'propagate': False,
        },
        'accounts.adapters': {
            'handlers': ['console', 'file'],
            'level': 'DEBUG',
            'propagate': True,
        },
    },
}

