# Generated by Django 5.1.4 on 2025-08-28 06:33

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('accounts', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ActivityType',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100)),
            ],
        ),
        migrations.CreateModel(
            name='Department',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=50)),
            ],
        ),
        migrations.CreateModel(
            name='LogYear',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_name', models.CharField(max_length=20, unique=True)),
            ],
        ),
        migrations.CreateModel(
            name='AdminNotification',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=100)),
                ('message', models.TextField()),
                ('support_ticket_type', models.CharField(choices=[('student', 'Student Support'), ('doctor', 'Doctor Support'), ('staff', 'Staff Support')], max_length=20)),
                ('ticket_id', models.IntegerField(blank=True, null=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('is_read', models.BooleanField(default=False)),
                ('recipient', models.ForeignKey(limit_choices_to={'role': 'admin'}, on_delete=django.db.models.deletion.CASCADE, related_name='admin_notifications', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Admin Notification',
                'verbose_name_plural': 'Admin Notifications',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='Blog',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('title', models.CharField(max_length=200)),
                ('content', models.TextField()),
                ('summary', models.CharField(help_text='A brief summary of the blog post (max 300 characters)', max_length=300)),
                ('category', models.CharField(choices=[('news', 'News'), ('announcement', 'Announcement'), ('feature', 'Feature'), ('update', 'Update')], default='news', max_length=20)),
                ('attachment', models.FileField(blank=True, null=True, upload_to='blog_attachments/')),
                ('attachment_name', models.CharField(blank=True, help_text='Name to display for the attachment', max_length=100)),
                ('featured_image', models.ImageField(blank=True, null=True, upload_to='blog_images/')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('is_published', models.BooleanField(default=True)),
                ('author', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='blogs', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Blog Post',
                'verbose_name_plural': 'Blog Posts',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='DateRestrictionSettings',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('past_days_limit', models.PositiveIntegerField(default=7, help_text='Maximum number of days in the past a student can select')),
                ('allow_future_dates', models.BooleanField(default=False, help_text='Whether students can select future dates')),
                ('future_days_limit', models.PositiveIntegerField(default=0, help_text='Maximum number of days in the future a student can select (if future dates are allowed)')),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctor_review_period', models.PositiveIntegerField(default=30, help_text='Number of days doctors have to review student logs')),
                ('doctor_review_enabled', models.BooleanField(default=True, help_text='Whether to enforce the review period deadline')),
                ('doctor_notification_days', models.PositiveIntegerField(default=3, help_text='Number of days before deadline to send notification to doctors')),
                ('doctor_past_days_limit', models.PositiveIntegerField(default=30, help_text='Maximum number of days in the past a doctor can review logs')),
                ('doctor_allow_future_dates', models.BooleanField(default=False, help_text='Whether doctors can review future-dated logs')),
                ('doctor_future_days_limit', models.PositiveIntegerField(default=0, help_text='Maximum number of days in the future a doctor can review logs (if future dates are allowed)')),
                ('allowed_days_for_students', models.CharField(default='0,1,2,3,4,5,6', help_text='Comma-separated list of allowed days of week for students (0=Monday, 6=Sunday)', max_length=20)),
                ('allowed_days_for_doctors', models.CharField(default='0,1,2,3,4,5,6', help_text='Comma-separated list of allowed days of week for doctors (0=Monday, 6=Sunday)', max_length=20)),
                ('is_active', models.BooleanField(default=True, help_text='Whether date restrictions are active')),
                ('attendance_tracking_enabled', models.BooleanField(default=True, help_text='Whether doctors can track student attendance')),
                ('updated_by', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='date_restriction_updates', to=settings.AUTH_USER_MODEL)),
            ],
            options={
                'verbose_name': 'Date Restriction Setting',
                'verbose_name_plural': 'Date Restriction Settings',
            },
        ),
        migrations.CreateModel(
            name='CoreDiaProSession',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=200)),
                ('activity_type', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_dia_pro_sessions', to='admin_section.activitytype')),
                ('department', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='core_dia_pro_sessions', to='admin_section.department')),
            ],
            options={
                'verbose_name': 'Core Diagnosis Procedure Session',
                'verbose_name_plural': 'Core Diagnosis Procedure Sessions',
            },
        ),
        migrations.AddField(
            model_name='activitytype',
            name='department',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='activity_types', to='admin_section.department'),
        ),
        migrations.AddField(
            model_name='department',
            name='log_year',
            field=models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='department_log_year', to='admin_section.logyear'),
        ),
        migrations.CreateModel(
            name='LogYearSection',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('year_section_name', models.CharField(max_length=20)),
                ('is_deleted', models.BooleanField(default=False)),
                ('year_name', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='log_year_sections', to='admin_section.logyear')),
            ],
        ),
        migrations.CreateModel(
            name='Group',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('group_name', models.CharField(max_length=50)),
                ('log_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='groups_log_year', to='admin_section.logyear')),
                ('log_year_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='groups_log_year_section', to='admin_section.logyearsection')),
            ],
        ),
        migrations.AddField(
            model_name='department',
            name='log_year_section',
            field=models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='department_log_year_section', to='admin_section.logyearsection'),
        ),
        migrations.CreateModel(
            name='TrainingSite',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(max_length=100, unique=True)),
                ('log_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='training_sites', to='admin_section.logyear')),
            ],
        ),
        migrations.AlterUniqueTogether(
            name='activitytype',
            unique_together={('name', 'department')},
        ),
        migrations.CreateModel(
            name='MappedAttendance',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('name', models.CharField(help_text='Name for this attendance mapping', max_length=100)),
                ('is_active', models.BooleanField(default=True)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('doctors', models.ManyToManyField(blank=True, related_name='mapped_attendances', to='accounts.doctor')),
                ('groups', models.ManyToManyField(blank=True, related_name='mapped_attendances', to='admin_section.group')),
                ('log_year', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapped_attendances', to='admin_section.logyear')),
                ('log_year_section', models.ForeignKey(blank=True, null=True, on_delete=django.db.models.deletion.SET_NULL, related_name='mapped_attendances', to='admin_section.logyearsection')),
                ('training_site', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='mapped_attendances', to='admin_section.trainingsite')),
            ],
            options={
                'verbose_name': 'Mapped Attendance',
                'verbose_name_plural': 'Mapped Attendances',
                'ordering': ['-created_at'],
                'unique_together': {('name', 'training_site', 'log_year')},
            },
        ),
    ]
